<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CodeWar on Wenhan blog</title>
    <link>https://wenhan.blog/tags/codewar/</link>
    <description>Recent content in CodeWar on Wenhan blog</description>
    <image>
      <title>Wenhan blog</title>
      <url>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Oct 2016 01:21:18 +0000</lastBuildDate><atom:link href="https://wenhan.blog/tags/codewar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pythonで回文チェック</title>
      <link>https://wenhan.blog/post/python-reverse-str-to-check-palindrome/</link>
      <pubDate>Sat, 29 Oct 2016 01:21:18 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/python-reverse-str-to-check-palindrome/</guid>
      <description>もう一題をやった。Palindrome chain length
回文に関する計算問題です。 回文とは、文字列を真ん中で割って、左辺と右辺が反転的に対称している文字列のこと。 例えば、「あいういあ」が回文であり、「あいうえお」が回文では無い。 数字の場合も同じく、5,44,171,4884が回文であり、43,194,4773が回文ではない。
そして、今回の問題は、引数の数字に対し、特定な計算方法で、何回計算したら回文になるかを算出する。 ここでの特定な計算方法は、「自分の数字の各桁を反転し、元の数字と足し算する」のこと。
例えば、87が与えられ、4回の計算で回文数字になったため、戻り値を４にする。
1 2 3 4  87 + 78 = 165; 165 + 561 = 726; 726 + 627 = 1353; 1353 + 3531 = 4884;   ここで難しいのは、数字をどうやって反転するか。 いろいろ調べた結果、意外と簡単でした。しかも一行で済む。Python で文字列反転
1 2  str(n) # 数字を文字列に変換 str(n)[::-1] # 数字を文字列に変換し、逆順に変換する。   このような書き方は、「文字列の末尾から一つずつ遡って先頭まで要素を取り出す」の操作となる。
そしてさっきの問題に対し自分の答えは
1 2 3 4 5 6  def palindrome_chain_length(n): cnt=0 while str(n) != str(n)[::-1] : cnt += 1 n += int(str(n)[::-1]) return cnt   いや〜便利だな〜これで今日もよく寝れる〜</description>
    </item>
    
    <item>
      <title>Pythonの出力フォーマット</title>
      <link>https://wenhan.blog/post/python-print-format/</link>
      <pubDate>Sat, 29 Oct 2016 00:28:06 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/python-print-format/</guid>
      <description>今日もCodeWarの問題を練習した。RGB To Hex Conversion
問題を簡略化にすると、rgbの数字を16進に変換し出力する。
1 2 3 4  rgb(255, 255, 255) # returns FFFFFF rgb(255, 255, 300) # returns FFFFFF rgb(0,0,0) # returns 000000 rgb(148, 0, 211) # returns 9400D3   直接hexで変換すると、”0x”が余計についているし、&amp;ldquo;00&amp;quot;が&amp;quot;0&amp;quot;になる。 sprintf見たいな関数が無いかなっと思いながら、このサイトを見つけた。 Cのsprintfのような文字列フォーマット
なんと、フォーマットを指定すれば数字が直接変換される！桁数の指定も出来る。
そして自分の答えは
1 2 3 4 5  def limit(a): return min(max(a, 0), 255) def rgb(r, g, b): return &amp;#34;%02X%02X%02X&amp;#34; % (limit(r), limit(g), limit(b),)   便利だな~</description>
    </item>
    
  </channel>
</rss>
