<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Wenhan blog</title>
    <link>https://wenhan.blog/tags/python/</link>
    <description>Recent content in Python on Wenhan blog</description>
    <image>
      <title>Wenhan blog</title>
      <url>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2017 10:30:55 +0000</lastBuildDate><atom:link href="https://wenhan.blog/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>systemctl command return &#39;Failed to connect to bus: No such file or directory&#39; in a docker container</title>
      <link>https://wenhan.blog/post/systemctl-command-return-failed-to-connect-to-bus-no-such-file-or-directory-in-a-docker-container/</link>
      <pubDate>Tue, 05 Sep 2017 10:30:55 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/systemctl-command-return-failed-to-connect-to-bus-no-such-file-or-directory-in-a-docker-container/</guid>
      <description>To enable and start a cron job and a httpd server in a docker container, I tried systemctl command but get an error output like this
1 2 3 4  [root@5f1f0a5cde43 app]# systemctl status crond Failed to connect to bus: No such file or directory [root@5f1f0a5cde43 app]# systemctl status httpd Failed to connect to bus: No such file or directory   Fix this issue by add --privileged parameter to docker run  command</description>
    </item>
    
    <item>
      <title>Desktop Notifier by Python</title>
      <link>https://wenhan.blog/post/desktop-notifier-by-python/</link>
      <pubDate>Fri, 28 Jul 2017 16:37:40 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/desktop-notifier-by-python/</guid>
      <description>This article show how to send desktop notice using Python
Install requirments we need to install notify2 by pip
1 2 3 4 5  # pip install notify2 Collecting notify2 Downloading notify2-0.3.1-py2.py3-none-any.whl Installing collected packages: notify2 Successfully installed notify2-0.3.1   Coding First we need to import notify2
1  import notify2   Then need to initialise the d-bus connection. D-Bus is a message bus system, a simple way for applications to talk to one another.</description>
    </item>
    
    <item>
      <title>Python每日获取天气情报并通过邮件通知</title>
      <link>https://wenhan.blog/post/get-weather-info-and-send-by-gmail-python/</link>
      <pubDate>Fri, 21 Apr 2017 00:16:17 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/get-weather-info-and-send-by-gmail-python/</guid>
      <description>因为没看天气预报，被大雨浇了几次之后，我打算为我这样的懒人写一个小程序。 很简单，算是Python的一个小练习，用Python实现一个邮件提醒每日天气。
这段程序一共分两步
 通过网站获取天气信息 将天气信息通过邮件发送到指定信箱  获取天气信息 这里我用了常用的requests和BeautifulSoup4来获取网页并抽取信息。 网站用tenki.jp搜索天气，然后通过id来抽取搜索界面的天气信息框框。 搜索界面如下，可以看到用BS4抽取id为&amp;rsquo;map_world_point_wrap&amp;rsquo;的以下的HTML就好了。 我们准备直接发送HTML代码，这样看起来更好看一些。
代码如下 注：soup.find之后需要将内容转换为string格式，不然python2环境下无法发送邮件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #!/root/.pyenv/shims/python #-*- coding: UTF-8 -*- import sys import time import requests from bs4 import BeautifulSoup #Some User Agents hds=[{&amp;#39;User-Agent&amp;#39;:&amp;#39;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.</description>
    </item>
    
    <item>
      <title>Pythonでスパイダーを作る</title>
      <link>https://wenhan.blog/post/crawling-webpage-use-python-requests/</link>
      <pubDate>Thu, 01 Dec 2016 00:54:09 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/crawling-webpage-use-python-requests/</guid>
      <description>PythonのRequestsライブラリを利用してウェブページの内容を抽出し保存する。 そして、BeautifulSoupライブラリを利用し、欲しい情報を抽出する。
Requestsとは RequestsはPythonのHTTPライブラリで、urllib2より断然使いやすい。 公式サイトに、
 Requests is an Apache2 Licensed HTTP library, written in Python, for human beings.
 の説明の通り、人間によって読みやすくコーディングできる。
Beautifulsoupとは BeautifulSoupはPythonで動作するHTMLとXMLのパーサーです。
インストール 1 2  pip install requests pip install BeautifulSoup   使い方 1 2  import requests from bs4 import BeautifulSoup   requestsライブラリでは、各種のHTTPメソッドに１対１のメソッドがあります。
1 2 3 4 5  requests.get(&amp;#39;URL&amp;#39;) requests.post(&amp;#39;URL&amp;#39;) requests.put(&amp;#39;URL&amp;#39;) requests.delete(&amp;#39;URL&amp;#39;) requests.head(&amp;#39;URL&amp;#39;)   初めてのスパイダー アマゾンの本のランキングの内容を取ってみよう。以下のことを要件とする。
 ブラウザがアクセスしているように、ヘッダ情報を編集する。 ページの取得が成功の場合のみ、ページ内容をファイルに保存する。 売れ筋ランキングの1-20位の本の順位とタイトルを出力する。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  import requests import time from bs4 import BeautifulSoup def anaylise_ranking_books(html): soup = BeautifulSoup(html.</description>
    </item>
    
    <item>
      <title>PythonでGoogle maps のapiを利用する</title>
      <link>https://wenhan.blog/post/google-maps-api-with-python/</link>
      <pubDate>Sat, 12 Nov 2016 01:22:46 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/google-maps-api-with-python/</guid>
      <description>PythonでGoogle mapsのAPI を利用しルート検索をやってみた。
利用するモジュールはgooglemaps/google-maps-services-python
環境構築は以下のコマンドでOK, ついでにipythonもインストールする。
1 2  $ pip install googlemaps $ pip install ipython   あと、GoogleのAPIキーの申請が必要なので、Google APIsで申請＆有効にする。
ここまで問題なかったら、早速使ってみよう。 戸塚駅から踊場駅まで、車のルート情報を取得
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79  $ ipython Python 3.</description>
    </item>
    
    <item>
      <title>Pythonで回文チェック</title>
      <link>https://wenhan.blog/post/python-reverse-str-to-check-palindrome/</link>
      <pubDate>Sat, 29 Oct 2016 01:21:18 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/python-reverse-str-to-check-palindrome/</guid>
      <description>もう一題をやった。Palindrome chain length
回文に関する計算問題です。 回文とは、文字列を真ん中で割って、左辺と右辺が反転的に対称している文字列のこと。 例えば、「あいういあ」が回文であり、「あいうえお」が回文では無い。 数字の場合も同じく、5,44,171,4884が回文であり、43,194,4773が回文ではない。
そして、今回の問題は、引数の数字に対し、特定な計算方法で、何回計算したら回文になるかを算出する。 ここでの特定な計算方法は、「自分の数字の各桁を反転し、元の数字と足し算する」のこと。
例えば、87が与えられ、4回の計算で回文数字になったため、戻り値を４にする。
1 2 3 4  87 + 78 = 165; 165 + 561 = 726; 726 + 627 = 1353; 1353 + 3531 = 4884;   ここで難しいのは、数字をどうやって反転するか。 いろいろ調べた結果、意外と簡単でした。しかも一行で済む。Python で文字列反転
1 2  str(n) # 数字を文字列に変換 str(n)[::-1] # 数字を文字列に変換し、逆順に変換する。   このような書き方は、「文字列の末尾から一つずつ遡って先頭まで要素を取り出す」の操作となる。
そしてさっきの問題に対し自分の答えは
1 2 3 4 5 6  def palindrome_chain_length(n): cnt=0 while str(n) != str(n)[::-1] : cnt += 1 n += int(str(n)[::-1]) return cnt   いや〜便利だな〜これで今日もよく寝れる〜</description>
    </item>
    
    <item>
      <title>Pythonの出力フォーマット</title>
      <link>https://wenhan.blog/post/python-print-format/</link>
      <pubDate>Sat, 29 Oct 2016 00:28:06 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/python-print-format/</guid>
      <description>今日もCodeWarの問題を練習した。RGB To Hex Conversion
問題を簡略化にすると、rgbの数字を16進に変換し出力する。
1 2 3 4  rgb(255, 255, 255) # returns FFFFFF rgb(255, 255, 300) # returns FFFFFF rgb(0,0,0) # returns 000000 rgb(148, 0, 211) # returns 9400D3   直接hexで変換すると、”0x”が余計についているし、&amp;ldquo;00&amp;quot;が&amp;quot;0&amp;quot;になる。 sprintf見たいな関数が無いかなっと思いながら、このサイトを見つけた。 Cのsprintfのような文字列フォーマット
なんと、フォーマットを指定すれば数字が直接変換される！桁数の指定も出来る。
そして自分の答えは
1 2 3 4 5  def limit(a): return min(max(a, 0), 255) def rgb(r, g, b): return &amp;#34;%02X%02X%02X&amp;#34; % (limit(r), limit(g), limit(b),)   便利だな~</description>
    </item>
    
  </channel>
</rss>
