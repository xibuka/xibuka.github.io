<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Wenhan blog</title>
    <link>https://wenhan.blog/tags/linux/</link>
    <description>Recent content in Linux on Wenhan blog</description>
    <image>
      <title>Wenhan blog</title>
      <url>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wenhan.blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2020 12:08:11 +0900</lastBuildDate><atom:link href="https://wenhan.blog/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Linux OS With Qemu CLI</title>
      <link>https://wenhan.blog/post/install-linux-os-with-qemu-cli/</link>
      <pubDate>Wed, 15 Apr 2020 12:08:11 +0900</pubDate>
      
      <guid>https://wenhan.blog/post/install-linux-os-with-qemu-cli/</guid>
      <description>Background Sometimes you want to build a reproducer for some installation issues. Instead of putting the actual CD-ROM in your machine, QEMU, a popular hardware virtualization solution, could help you to test it on virtual machines. Qemu can help you to do a GUI install with Desktop or live Server install ISO, or use text-mode installation with a Server install CD.
Install 1  $ sudo apt install qemu   And also you need a ISO for installation.</description>
    </item>
    
    <item>
      <title>connect to wifi in Linux via nmcli command</title>
      <link>https://wenhan.blog/post/access-wifi-point-via-command-line-cli/</link>
      <pubDate>Sat, 17 Aug 2019 00:55:53 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/access-wifi-point-via-command-line-cli/</guid>
      <description>I will use nmcli to do this task.
First you need to install network-manager package, and start the Daemon
1 2  $ sudo apt install network-manager $ sudo systemctl start NetworkManager   Then let&amp;rsquo;s check the network interface status by below command
1 2 3 4 5 6 7  $ nmcli dev status DEVICE TYPE STATE CONNECTION wlp2s0 wifi connected xibuka-wifi-5G enp0s31f6 ethernet connected netplan-enp0s31f6 p2p-dev-wlp2s0 wifi-p2p disconnected -- eth0 ethernet unavailable -- lo loopback unmanaged --   Next step is to check the available Wifi access points.</description>
    </item>
    
    <item>
      <title>Ansible 入門 - 基本操作(チュートリアル)</title>
      <link>https://wenhan.blog/post/getting-started-with-ansible-jp-basic/</link>
      <pubDate>Mon, 09 Apr 2018 15:25:32 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/getting-started-with-ansible-jp-basic/</guid>
      <description>こちらの記事はではAnsibleを紹介するための文章で、元Red Hat社員のJingjing Shiが作成し、Wenhan Shiが日本語に翻訳しました。内容の校正はHideki SaitoとKento Yagisawaが協力しています。Ansibleの基礎知識から、実際の現場で利用できる実運用まで紹介しています。
本文内にあるすべてのansible playbookの例は、以下のgithubのURLから利用できる。 https://github.com/ansible-book/ansible-first-book-examples もし不備やコメントがありましたら、作者shijingjing02@163.comまたは翻訳者shibunkan@gmail.com に連絡してください。
詳細の内容を下記三つに分けて説明します。
Ansible 入門 - 紹介 Ansible 入門 - 基本 Ansible 入門 - 応用
本章では、簡単な例を使ってAnsibleの基本的な使い方を説明する。
 インストール 管理対象のサーバー（サーバリストの管理） コマンドラインによるサーバー管理(Ad-hoc command) スクリプトによるサーバー管理(スクリプト言語 Playbook) モジュール  インストール ここでは Red Hat 系 Linux でのインストールを前提に解説にする。他のOSに関していAnsibleのWebページをご参照ください。
管理者ノード Ansible パッケージをインストール 1 2 3 4  # Redhat/CentOS Linuxの場合, epolリポジトリをインストールする必要がある。 # Fedoraの場合、デフォルトのリポジトリにAnsibleを含まれているため，直接インストールできる sudo yum install epel-release sudo yum install ansible -y   管理者ノードからリモートノードの接続設定 SSH keyによる認証パスワードレス）方式を設定する。
1 2 3 4 5 6  # ssh key を生成 ssh-keygen # リモートノードにssh keyをコピー ssh-copy-id remoteuser@remoteserver # リモートノードをknows_hostsに追加（ssh Keyの保存確認がなくなる） ssh-keyscan remote_servers &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Ansible 入門 - 応用</title>
      <link>https://wenhan.blog/post/getting-started-with-ansible-jp-adv/</link>
      <pubDate>Mon, 09 Apr 2018 15:20:32 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/getting-started-with-ansible-jp-adv/</guid>
      <description>こちらの記事はではAnsibleを紹介するための文章で、元Red Hat社員のJingjing Shiが作成し、Wenhan Shiが日本語に翻訳しました。内容の校正はHideki SaitoとKento Yagisawaが協力しています。Ansibleの基礎知識から、実際の現場で利用できる実運用まで紹介しています。
本文内にあるすべてのansible playbookの例は、以下のgithubのURLから利用できる。 https://github.com/ansible-book/ansible-first-book-examples もし不備やコメントがありましたら、作者shijingjing02@163.comまたは翻訳者shibunkan@gmail.com に連絡してください。
詳細の内容を下記三つに分けて説明します。
Ansible 入門 - 紹介 Ansible 入門 - 基本 Ansible 入門 - 応用
本章では、もっと自由に運用するために、Ansibleの高度な使い方を説明する。
 Ansibleの設定ファイル サーバーリスト管理（Host Inventory） Playbookの上級な書き方 Extraモジュールの利用  Ansible設定ファイル 設定内容  基本の設定内容     項目 詳細 内容（デフォルト）     inventory リモートノードリスト管理ファイル /etc/ansible/hosts   library 拡張モジュールフォルダ /usr/share/my_modules/   remote_tmp リモートノード上のファイル一時保存場所 $HOME/.ansible/tmp   local_tmp 管理者ノード上のファイル一時保存場所 $HOME/.ansible/tmp     高度の設定内容     項目 詳細 内容（デフォルト）     accelerate_port 接続ポート番号 5099   accelerate_timeout タイムアウト 30   accelerate_connect_timeout 接続タイムアウト 5    上記は設定できる内容の一部しかすぎない。以下のAnsible設定ファイルの全体を通して、どんなことができるのはは理解できる</description>
    </item>
    
    <item>
      <title>Ansible 入門 - 紹介</title>
      <link>https://wenhan.blog/post/getting-started-with-ansible-jp-intro/</link>
      <pubDate>Mon, 09 Apr 2018 15:15:32 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/getting-started-with-ansible-jp-intro/</guid>
      <description>こちらの記事はではAnsibleを紹介するための文章で、元Red Hat社員のJingjing Shiが作成し、Wenhan Shiが日本語に翻訳しました。内容の校正はHideki SaitoとKento Yagisawaが協力しています。Ansibleの基礎知識から、実際の現場で利用できる実運用まで紹介しています。
本文内にあるすべてのansible playbookの例は、以下のgithubのURLから利用できる。 https://github.com/ansible-book/ansible-first-book-examples もし不備やコメントがありましたら、作者shijingjing02@163.comまたは翻訳者shibunkan@gmail.com に連絡してください。
詳細の内容を下記三つに分けて説明します。
Ansible 入門 - 紹介 Ansible 入門 - 基本 Ansible 入門 - 応用
本章では、Ansibleの基礎部分の紹介を説明する。
Ansibleとは Ansibleとはなにか？ Ansibleは、複数のサーバを一括でコントロールする構成管理ツールである。コントロールできるサーバ対象はリモートの仮想マシンでも物理マシンでも問ローカルのサーバマシンも問題ない。
Ansibleでなにができる？ Ansibleでは、SSHなどを利用し管理ノードからリモートノードへの通信を行う。理論上では、サーバ管理者がsshでサーバにログインした後できるすべてのことに対し、Ansibleも同じことができる。
例えば
 ファイルコピー パッケージインストール デーモンサービス起動 その他  アーキテクチャ 管理者ノードとリモートノードの間では、SSHプロトコルを利用して通信を行っている。そのため、Ansible環境を設定する時に、管理者ノードからリモートノードへSSHログインできることが必要である。ただし、SSHログインはパスワードレスに設定しなければいけない。詳細な設定方法は後ほど説明する。
SSH接続 管理者ノードでAnsibleをインストールし、スクリプトの編集を行う。管理者ノードでAnsibleのコマンドやスクリプトを実行する時に、管理対象のサーバにSSHで接続する。管理対象のサーバの上にパッケージをインストールする必要がない。 多種類のサーバに対応 AnsibleはRedHat系、Debian系のLinuxと、Windows系のサーバを同時に管理することができる。管理者ノードはスクリプトを実行する時のみリモートサーバに接続するため、他の同期処理がない。そのため、通常の状態では、停電などの異常状態はAnsibleを影響しない。 Ansible Towerのアーキテクチャ なぜAnsible Towerが必要なのか？ Ansible Towerは企業向けの有償ソフトウェアである。 前章のAnsible アーキテクチャとこれからのAnsibleのインストールでは、すべてのAnsibleでの管理対象となるサーバは、sshの公開鍵認証によるパスワードレスSSH接続を設定する必要がある。一般ユーザの場合、数台の仮想サーバやリモートサーバのみを管理するため特に問題ないが、企業ユーザに対し業務プロセスと安全性を確保しにくくなる。
 1台のリモートサーバを追加する毎に、パスワードレスなSSH接続の設定を手動で行うことは非常に非効率的である。企業レベルのサーバが数百台、数千台規模になると、各サーバ管理者が自分の管理者ノードで全サーバに対しパスワードレスSSH接続の設定が必要となり、作業量は膨大になる。 管理者がパスワードレスSSH接続の為のssh keyを入手したり、他人にコピーしたりすると、本番環境に対し重大なセキュリティの問題になる。  Ansible Towerでなにができるのか？ Ansible Towerは企業ユーザ向けに開発されている、集中管理や権限による制限、ジョブスケジューリング機能などを提供するソフトウェアである。このソフトウェアは管理者にWebUIやREST APIを提供し、Playbookの実行やワークフローテンプレートによる条件分岐などをサポートする。
 管理者は、Ansible Tower上にサーバのssh keyを使用したりシェアしたりすることができるが、ssh keyの内容参照やコピーすることはできない。 Ansible Towerでは、各管理者がシェアしているplaybookスクリプトを参照するとこができるため、重複する作業を減らすことができる。 また、Ansible Towerは現在すべてのサーバでのplaybookの実行状況を集計/表示するため、状態の確認や統計もできる。  下記の図でAnsible Towerのアーキテクチャを示している。</description>
    </item>
    
    <item>
      <title>failed at yum update and how to fix it</title>
      <link>https://wenhan.blog/post/failed-at-yum-update-and-how-to-fix-it/</link>
      <pubDate>Sun, 18 Feb 2018 16:46:33 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/failed-at-yum-update-and-how-to-fix-it/</guid>
      <description>I hit an error when running yum update on my centOS 7, the command failed to update my OS!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  # yum update Loaded plugins: fastestmirror Determining fastest mirrors * base: centos.gbeservers.com * epel: linux.mirrors.es.net * extras: linux.mirrors.es.net * ius: hkg.</description>
    </item>
    
    <item>
      <title>AWK - time functions</title>
      <link>https://wenhan.blog/post/awk-time-functions/</link>
      <pubDate>Fri, 24 Nov 2017 08:34:34 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/awk-time-functions/</guid>
      <description>Apart of date, awk also has below built-in time functions which will help you to resolve time convert problem
systime() This will return the current time as the number of seconds since the Epoch (1970-01-01 00:00:00).
1 2 3 4  $ awk &amp;#39;BEGIN { &amp;gt; print &amp;#34;Number of seconds since the Epoch = &amp;#34; systime() &amp;gt; }&amp;#39; Number of seconds since the Epoch = 1511480989   mktime(YYYY MM DD HH MM SS) This will convert date string &amp;ldquo;YYYY MM DD HH MM SS&amp;rdquo; to the number of seconds since the Epoch.</description>
    </item>
    
    <item>
      <title>How to check if a disk is SSD or HDD</title>
      <link>https://wenhan.blog/post/how-to-check-if-a-disk-is-ssd-or-hdd/</link>
      <pubDate>Thu, 02 Nov 2017 08:27:14 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/how-to-check-if-a-disk-is-ssd-or-hdd/</guid>
      <description>Linux will detects SSD automatically. Since kernel version 2.6.29, you can check /dev/sda with following command
1  # cat /sys/block/sda/queue/rotational   The return number 0 shows you /dev/sda is a SSD, and 1 shows it is a HDD. Note that this command may not work when your disk is created by hardware RAID.
Another way is to use lsblk command, a part of the util-linux package.
1 2 3 4  # lsblk -d -o name,rota NAME ROTA sda 0 sdb 1   ROTA means rotational device, 1 for true, 0 for false.</description>
    </item>
    
    <item>
      <title>How to sort ps command output</title>
      <link>https://wenhan.blog/post/how-to-sort-ps-command-output/</link>
      <pubDate>Tue, 19 Sep 2017 14:11:37 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/how-to-sort-ps-command-output/</guid>
      <description>ps command has a --sort option which can help you to sort processes.
1 2 3 4 5 6 7  --sort spec Specify sorting order. Sorting syntax is [+|-]key[,[+|-]key[,...]]. Choose a multi-letter key from the STANDARD FORMAT SPECIFIERS section. The &amp;#34;+&amp;#34; is optional since default direction is increasing numerical or lexicographic order. Identical to k. For example: ps jax --sort=uid,-ppid, +pid   Sort ps output by memory From high to low The highest is at the top of the command</description>
    </item>
    
    <item>
      <title>Beginner guide of systemd on CentOS7/RHEL7</title>
      <link>https://wenhan.blog/post/beginner-guide-of-systemd-on-centos7-rhel7/</link>
      <pubDate>Mon, 11 Sep 2017 10:19:16 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/beginner-guide-of-systemd-on-centos7-rhel7/</guid>
      <description>Introduction of systemd Before CentOS 7 and RHEL 7, System V was used to be the system controller. The system controller can manage all processes, services, and start task. System V has a performance problem as it is using script to manage the tasks. So it can only start the task serially, which will slow down the startup of the system.
From CentOS 7, the systemd become the new system controller.</description>
    </item>
    
    <item>
      <title>systemctl command return &#39;Failed to connect to bus: No such file or directory&#39; in a docker container</title>
      <link>https://wenhan.blog/post/systemctl-command-return-failed-to-connect-to-bus-no-such-file-or-directory-in-a-docker-container/</link>
      <pubDate>Tue, 05 Sep 2017 10:30:55 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/systemctl-command-return-failed-to-connect-to-bus-no-such-file-or-directory-in-a-docker-container/</guid>
      <description>To enable and start a cron job and a httpd server in a docker container, I tried systemctl command but get an error output like this
1 2 3 4  [root@5f1f0a5cde43 app]# systemctl status crond Failed to connect to bus: No such file or directory [root@5f1f0a5cde43 app]# systemctl status httpd Failed to connect to bus: No such file or directory   Fix this issue by add --privileged parameter to docker run  command</description>
    </item>
    
    <item>
      <title>How to change timezone in CentOS 7 or RHEL 7</title>
      <link>https://wenhan.blog/post/how-to-change-timezone-in-centos-7-or-rhel-7/</link>
      <pubDate>Thu, 10 Aug 2017 14:18:08 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/how-to-change-timezone-in-centos-7-or-rhel-7/</guid>
      <description>check the current timezone status 1 2 3 4 5 6 7 8 9  [root@rhel7 ~]# timedatectl Local time: Thu 2017-08-10 05:19:53 UTC Universal time: Thu 2017-08-10 05:19:53 UTC RTC time: Thu 2017-08-10 05:19:52 Time zone: UTC (UTC, +0000) NTP enabled: yes NTP synchronized: yes RTC in local TZ: no DST active: n/a   list the avaliable timezones 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  [root@rhel7 ~]# timedatectl list-timezones Asia/Aden Asia/Almaty Asia/Amman Asia/Anadyr Asia/Aqtau Asia/Aqtobe Asia/Ashgabat .</description>
    </item>
    
    <item>
      <title>Install Chrome Browser via yum in CentOS or Fedora or RHEL</title>
      <link>https://wenhan.blog/post/install-chrome-browser-via-yum-in-centos-or-fedora-or-rhel/</link>
      <pubDate>Fri, 14 Jul 2017 09:29:58 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/install-chrome-browser-via-yum-in-centos-or-fedora-or-rhel/</guid>
      <description>Create a google yum repository Create a file /etc/yum.repos.d/google-chrome.repo and add the following into it.
1 2 3 4 5 6  [google-chrome] name=google-chrome baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch enabled=1 gpgcheck=1 gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub   Check the google repository Run following command to check the repository is available.
1  # yum info google-chrome-stable   From the output you should find the lastest version of the package google-chrome-stable
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  # yum info google-chrome-stable Fedora 26 - x86_64 - Updates 6.</description>
    </item>
    
    <item>
      <title>OpenShift Configure authentication and User Agent using HTPasswd</title>
      <link>https://wenhan.blog/post/openshift-configure-authetication-and-user-agent-using-htpasswd/</link>
      <pubDate>Wed, 12 Jul 2017 14:43:47 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/openshift-configure-authetication-and-user-agent-using-htpasswd/</guid>
      <description>As we Install the OpenShift by Ansible method, identity provider is set to Deny all by default, which will deny access from all users. To allow access for users, you must choose another identity provider and configure the master configuration file. By default, the master configuration file is located at /etc/origin/master/master-config.yaml. OpenShift has several identity providers which can help you to manager user authentication. I will use HTPasswd this time. You can find more information in Configuring Authentication and User Agent</description>
    </item>
    
    <item>
      <title>[OpenShift]Quick install OpenShift to multi nodes</title>
      <link>https://wenhan.blog/post/openshift-use-ansible-to-install-openshift-to-multi-nodes/</link>
      <pubDate>Fri, 07 Jul 2017 15:32:15 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/openshift-use-ansible-to-install-openshift-to-multi-nodes/</guid>
      <description>In this article we will show you how to install OpenShift in mutliple nodes using a quick install command, atomic-openshift-installer, which is powered by ansible.
Host preparation I use under virtual machines for OpenShift nodes to deploy
   Type CPU Mem HDD hostname OS     Master 1 2 GB 20 GB master.example.com RHEL 7   node 1 2 GB 20 GB node1.example.com RHEL 7   node 1 2 GB 20 GB node2.</description>
    </item>
    
    <item>
      <title>How to keep process running after log off</title>
      <link>https://wenhan.blog/post/how-to-keep-process-script-running-after-end-the-ssh-session/</link>
      <pubDate>Thu, 29 Jun 2017 14:31:14 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/how-to-keep-process-script-running-after-end-the-ssh-session/</guid>
      <description>tmux is an opensource software that can help you to do this. There are a lot of other things tmux can do, but now let me explain how to keep process running even end the ssh session. Please follow the steps:
 start a tmux session by input tmux to the shell. start your process or script inside the tmux session. leave(detach) the tmux session by input Ctrl+b and then d.</description>
    </item>
    
    <item>
      <title>[OpenShift]Install OpenShift and Create first project Hello-OpenShift</title>
      <link>https://wenhan.blog/post/openshift-install-openshift-and-create-first-project-hello-openshift/</link>
      <pubDate>Mon, 26 Jun 2017 13:40:40 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/openshift-install-openshift-and-create-first-project-hello-openshift/</guid>
      <description>Install Linux OS and confirm network setting. You need to create a Linux OS machine to install OpenShift. The minimum requirement is
   CPU Memory hard disk Network     x86_64 1 core 2 GB 20 GB IPv4    First you need to install CentOS 7.3, by select minimum setup. After you finish the installation, check your IP address to make sure you have available IP to use.</description>
    </item>
    
    <item>
      <title>How to clear memory cache, buffer and swap on linux</title>
      <link>https://wenhan.blog/post/how-to-clear-memory-cache-buffer-and-swap-on-linux/</link>
      <pubDate>Fri, 16 Jun 2017 12:05:35 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/how-to-clear-memory-cache-buffer-and-swap-on-linux/</guid>
      <description>How to clear cache in Linux  Clear PageCache only  1  # sync ; echo 1 &amp;gt; /proc/sys/vm/drop_caches    Clear Dentries and inodes(metadata)  1  # sync ; echo 2 &amp;gt; /proc/sys/vm/drop_caches    Clear All cache(include PageCache and Dentries and inode)  1  # sync ; echo 3 &amp;gt; /proc/sys/vm/drop_caches   How to clear swap space in Linux 1  # swapoff -a &amp;amp;&amp;amp; swapon -a   NOTE: This may make your system unstable when you have low RAM already.</description>
    </item>
    
    <item>
      <title>Linux文件的特殊权限设置 setuid setgit sticky</title>
      <link>https://wenhan.blog/post/linux-special-permissions-for-file-and-dir-cn/</link>
      <pubDate>Wed, 03 May 2017 01:17:17 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/linux-special-permissions-for-file-and-dir-cn/</guid>
      <description>特殊权限对文件和文件夹的影响 Linux系统中存在三个比较特殊的权限，分别是setuid，setgid，和sticky。 下面的表显示了他们之间的区别和对文件及文件夹的影响。
   权限种类 对文件的影响 对文件夹的影响。     u+s(suid) 文件在自己的owner权限下执行，而并不是在执行这个文件的用户下执行。好处就是不管谁执行这个文件，环境变数等常量都可以统一为onwer的 无影响   g+s(sgid) 跟setuid很像，文件执行时会在自己的group下执行。 文件夹内新文件的group都会跟上层文件夹的group一致   o+t(sticky) 无影响 对文件夹有w权限的用户，仅允许更改和删除属于自己的文件。也就是owner是自己的文件。对其他用户的文件无法更改或删除。    特殊权限的设定。 用记号设定: setuid = u+s; setgid = g+s; sticky = o+t 用数字设定: setuid = 4; setgid = 2; sticky = 1
例
1 2  # chmod g+s file # chmod 1755 file   </description>
    </item>
    
    <item>
      <title>ファイルとディレクトリへの特殊パーミッション</title>
      <link>https://wenhan.blog/post/linux-special-permissions-for-file-and-dir-jp/</link>
      <pubDate>Thu, 27 Apr 2017 23:59:20 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/linux-special-permissions-for-file-and-dir-jp/</guid>
      <description>特殊パーミションの説明 ファイルとフォルダに対し、setuid、setgid、sticky bitの三つの特殊パーミッションが存在する。 setuidとsetgidパーミッションは、コマンドを実行したユーザまたはグループではなく、ファイルの所有者として実行したことを意味する。 sticky bitパーミッションは、ファイルの削除に関する特殊な制限があり、ファイルの所有者及びrootのみがディレクトリ内のファイルを削除できるようになっている。
   特殊パーミッション ファイルへの影響 フォルダへの影響     u+s(suid) ファイルを実行したユーザではなく、ファイルの所有者としてファイルが実行される。 影響なし   g+s(sgid) ファイルが所属するグループとして実行される。 フォルダ内に新規作成したファイルの所有グループは、フォルダの所有グループと同じになる。   o+t(sticky) 影響なし フォルダに書き込みパーミションを持つユーザは、自分が所有しているファイルのみ削除できる。他のユーザが所有するファイルの削除または編集はできない。    特殊パーミションの設定 記号を使用: setuid = u+s; setgid = g+s; sticky = o+t 数字を使用: setuid = 4; setgid = 2; sticky = 1
例
1 2  # chmod g+s file // fileに対してsetgidビットを追加 # chmod 1755 file // fileに対してstickyビットを追加   </description>
    </item>
    
    <item>
      <title>Linux ユーザパスワードの有効期限の管理</title>
      <link>https://wenhan.blog/post/linux-password-aging-jp/</link>
      <pubDate>Thu, 27 Apr 2017 23:15:00 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/linux-password-aging-jp/</guid>
      <description>Linuxのユーザパスワードの有効期限(aging)の管理について説明する。
 last chage (-d) : パスワードが最後に変更した日数 min days (-m) : パスワードが変更可能の最小日数 max days (-M) : パスワードの変更が必要となる最大日数 warn days (-W) : パスワードの有効期限が近づき、変更を促す（ワーニング）の日数 password expiration date : パスワード有効期限 inactive days (-l) : パスワードの有効期限が切れた後に、アカウントが保持される日数 inactive date : アカウントが非アクティブになる期限  上記情報の変更は、chage コマンドで実現できる。
1  # chage -m 0 -M 60 -W 7 -l 30   また、chage コマンドに対し以下の使い方もある。
 次回ログイン時に強制パスワードを変更させる  1  # chage -d 0 username    現在の設定一覧を表示  1  # chage -l username    指定した日付でアカウントが期限切れになる  1  # chage -E YYYY-MM-DD username   ユーザアカウントに関連する内容で他にも</description>
    </item>
    
    <item>
      <title>ソフトリンクとハードリンクの違い</title>
      <link>https://wenhan.blog/post/soft-link-and-hard-link-ja/</link>
      <pubDate>Thu, 27 Apr 2017 22:14:48 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/soft-link-and-hard-link-ja/</guid>
      <description>ソフトリンクとハードリンクの違いについてメモする 他にも思い出したらまた追記する。
   項目 ソフトリンク ハードリンク     size 4 byte 表示上元ファイルと同じ   inode 元ファイルと異なるinodeを持つ 元ファイルと同じinodeを持つ   制限 - 元ファイルと同じファイルシステム上にある必要がある    以下でリンクのサイズとinode番号の違いがわかるはず。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  wenhanMBP: /tmp/link → ls -li total 1024 12807105 -rw-r--r-- 1 shiwenhan wheel 524288 4 27 22:18 file wenhanMBP: /tmp/link → ln file hardlink-to-file wenhanMBP: /tmp/link → ls -li total 2048 12807105 -rw-r--r-- 2 shiwenhan wheel 524288 4 27 22:18 file 12807105 -rw-r--r-- 2 shiwenhan wheel 524288 4 27 22:18 hardlink-to-file wenhanMBP: /tmp/link → ln -s file softlink-to-file wenhanMBP: /tmp/link → ls -lih total 2056 12807105 -rw-r--r-- 2 shiwenhan wheel 512K 4 27 22:18 file 12807105 -rw-r--r-- 2 shiwenhan wheel 512K 4 27 22:18 hardlink-to-file 12807448 lrwxr-xr-x 1 shiwenhan wheel 4B 4 27 22:27 softlink-to-file -&amp;gt; file   </description>
    </item>
    
    <item>
      <title>cannot ssh to server as root</title>
      <link>https://wenhan.blog/post/cannot-ssh-to-server-by-root-user/</link>
      <pubDate>Thu, 16 Feb 2017 16:36:12 +0000</pubDate>
      
      <guid>https://wenhan.blog/post/cannot-ssh-to-server-by-root-user/</guid>
      <description>rootパスワードを知っているのに、rootでssh接続できない問題の解決方法です。
実はsshdの設定ファイルに、rootでのログイン許可を設定するパラメータがあります。 Linux環境では、設定ファイル/etc/ssh/sshd_configに対し
1  PermitRootLogin no   を
1  PermitRootLogin yes   に変更し、sshdを再起動すれば、アクセス出来るようになる。
1  # systemctl restart sshd   また、以下のように自動ログインをOFFにするパラメータも存在する
1  PubkeyAuthentication no   特定のIPに対しての個別設定も可能
1 2  Match Address 172.25.0.11 PubkeyAuthentication no   </description>
    </item>
    
  </channel>
</rss>
